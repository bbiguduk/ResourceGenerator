//
//  main.swift
//  ResourcesGenerator
//
//  Created by Jeong, Bo Ram (정보람) on 2021/11/17.
//

import Foundation

// MARK: - Type enumeration

enum ResourceType: String {
    case string
    case image
    case color
    
    var assets: String {
        switch self {
        case .string: return "string"
        case .image: return "imageset"
        case .color: return "colorset"
        }
    }
    
    var classStr: String {
        switch self {
        case .string: return "String"
        case .image: return "UIImage"
        case .color: return "UIColor"
        }
    }
}

// MARK: - UserDefaults Extension

extension UserDefaults {
    var arguments: (ResourceType, String, String, String) {
        guard let type = string(forKey: "type"),
              let resourceType = ResourceType(rawValue: type) else {
            fatalError("An type must be specified by \"-type\".")
        }
        guard let assetPath  = string(forKey: "path") else {
            fatalError("An asset catalog path must be specified by \"-path\".")
        }
        guard let outputPath = string(forKey: "output") else {
            fatalError("An output path must be specified by \"-output\".")
        }
        guard let enumName = string(forKey: "enumName") else {
            fatalError("An enum name must be specified by \"-enumName\".")
        }
        
        return (resourceType, assetPath, outputPath, enumName)
    }
}

// MARK: - FileManager Extension

extension FileManager {
    func parser(type: ResourceType, targetPath path: String) -> [String]? {
        do {
            switch type {
            case .string:
                return try localizable(path: path)
            case .image, .color:
                return try assets(type: type, inAssetsPath: path)
            }
        } catch {
            print("\n[Error] An error occurred in \(#function).\n\t error: \(error)\n")
        }
        
        return nil
    }
    
    func localizable(path: String) throws -> [String]? {
        let url = URL(fileURLWithPath: path)
        let localizables = try String(contentsOf: url, encoding: .utf8)
        let localizableArr = localizables.split(separator: "\n").map(String.init)
        
        var result: [String] = []
        let regex = try NSRegularExpression(pattern: "^[a-zA-Z]+(.*)[\\s]*=[\\s]*(.*)$")
        localizableArr.forEach {
            let resultRange = regex.firstMatch(in: $0, range: NSRange($0.startIndex..., in: $0))
            
            if let resultRange = resultRange {
                let matchString = String($0[Range(resultRange.range, in: $0)!])
                let matchkey = matchString.split(separator: "=").map {
                    $0.trimmingCharacters(in: .whitespaces)
                }
                
                result.append(matchkey[0])
            }
        }
        
        return result
    }
    
    func assets(type: ResourceType, inAssetsPath path: String) throws -> [String]? {
        // let remove white spaces and dash from asset name. e.g My Image.imagesets, My-Image.imagesets into My_Image
        let normalize = { (asset: String) -> String in
            if let regex = try? NSRegularExpression(pattern: "\\s|-", options: .caseInsensitive){
                let range = NSRange(location: 0, length: asset.count)
                
                return regex.stringByReplacingMatches(in: asset, options: .withTransparentBounds, range: range, withTemplate: "_")
            }
            return asset
        }
        
        let subpaths = try subpathsOfDirectory(atPath: path)
        return subpaths.filter {
                $0.hasSuffix(type.assets)
            }
            .map {
                normalize(($0 as NSString).lastPathComponent.components(separatedBy: ".")[0])
            }
    }
}

// MARK: - Function

func makeSwift(_ type: ResourceType, _ target: [String], _ outputPath: String, _ enumName: String) -> Bool {
    let indent = "    " // indent is 4 spaces
    var file: String = ""
    
    // file header
    file += "// Generated by Resources.swift" + "\n"
    file += "\n"
    
    switch type {
    case .string:
        // +String extension
        file += "// MARK: - \(type.classStr) extension" + "\n\n"
        file += "extension \(type.classStr) {" + "\n"
        // Property
        file += indent + "init(localizableName: \(enumName)) {" + "\n"
        file += indent + indent + "self.init(NSLocalizedString(localizableName.rawValue, comment: \"\"))" + "\n"
        file += indent + "}" + "\n"
        file += "}" + "\n\n"
        // -String extension
    
        // +enum
        file += "// MARK: - " + enumName + "\n\n"
        file += "enum \(enumName): String {" + "\n"
        target.forEach {
            file += indent + "case \($0) = \"\($0)\"" + "\n"
        }
        file += "\n"
        file += indent + "var \(type.rawValue): \(type.classStr) {" + "\n"
        file += indent + indent + "return \(type.classStr)(localizableName: self.rawValue)!" + "\n"
        file += indent + "}" + "\n"
        file += "}" + "\n"
        // -enum
    case .image, .color:
        file += "import UIKit" + "\n"
        file += "\n"
        
        // +UIImage/UIColor extension
        file += "// MARK: - \(type.classStr) extension" + "\n\n"
        file += "extension \(type.classStr) {" + "\n"
        // Init
        file += indent + "convenience init!(assetName: \(enumName)) {" + "\n"
            file += indent + indent + "self.init(named: assetName.rawValue)" + "\n"
        file += indent + "}" + "\n"
        file += "}" + "\n\n"
        // -UIImage/UIColor extension
        
        // +enum
        file += "// MARK: - " + enumName + "\n\n"
        file += "enum \(enumName): String {" + "\n"
        target.forEach {
            file += indent + "case \($0) = \"\($0)\"" + "\n"
        }
        file += "\n"
        file += indent + "var \(type.rawValue): \(type.classStr) {" + "\n"
        file += indent + indent + "return \(type.classStr)(named: self.rawValue)!" + "\n"
        file += indent + "}" + "\n"
        file += "}" + "\n"
        // -enum
    }
    
    let data = file.data(using: String.Encoding.utf8, allowLossyConversion: false)
    return FileManager.default.createFile(atPath: outputPath, contents: data, attributes: nil)
}

// MARK: - Main

// Strings
//let (resourceType, path, output, enumName) = (ResourceType.string, "/Users/bojeong/Desktop/Boram/Test/ResourcesGenerator/ResourcesGenerator/Localizable.strings", "/Users/bojeong/Desktop/Boram/Test/ResourcesGenerator/ResourcesGenerator/Strings.swift", "Strings")

// Images
//let (resourceType, path, output, enumName) = (ResourceType.image, "/Users/bojeong/Desktop/Boram/Test/ResourcesGenerator/ResourcesGenerator/Images.xcassets", "/Users/bojeong/Desktop/Boram/Test/ResourcesGenerator/ResourcesGenerator/Images.swift", "Images")

// Colors
//let (resourceType, path, output, enumName) = (ResourceType.color, "/Users/bojeong/Desktop/Boram/Test/ResourcesGenerator/ResourcesGenerator/Colors.xcassets", "/Users/bojeong/Desktop/Boram/Test/ResourcesGenerator/ResourcesGenerator/Colors.swift", "Colors")


let (resourceType, path, output, enumName) = UserDefaults.standard.arguments
let fm = FileManager.default

guard let parse = fm.parser(type: resourceType, targetPath: path),
      !parse.isEmpty else {
    fatalError("\n[Error] No data is found and failed to export a file...\n")
}

let result = makeSwift(resourceType, parse, output, enumName)
let resultStr = result ? "Succeeded" : "Failed"
print("\n\(resultStr) to generate resource manager file at \(output).\n")
